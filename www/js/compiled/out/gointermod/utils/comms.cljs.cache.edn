;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name gointermod.utils.comms, :imports nil, :requires {http cljs-http.client, cljs-http.client cljs-http.client, utils gointermod.utils.utils, gointermod.utils.utils gointermod.utils.utils, re-frame re-frame.core, re-frame.core re-frame.core, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {get-service {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([source]))}, :name gointermod.utils.comms/get-service, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 18, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, make-base-query {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 13, :column 7, :end-line 13, :end-column 22, :arglists (quote ([identifier organism evidence-codes]))}, :name gointermod.utils.comms/make-base-query, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 22, :method-params ([identifier organism evidence-codes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([identifier organism evidence-codes]))}, create-constraint-values {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 21, :column 7, :end-line 21, :end-column 31, :arglists (quote ([values]))}, :name gointermod.utils.comms/create-constraint-values, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 31, :method-params ([values]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([values]))}, go-query {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 26, :column 7, :end-line 26, :end-column 15, :arglists (quote ([input-organism identifiers output-organism])), :doc "Get the results of GO term query for specified symbol/identifier"}, :name gointermod.utils.comms/go-query, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 15, :method-params ([input-organism identifiers output-organism]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([input-organism identifiers output-organism])), :doc "Get the results of GO term query for specified symbol/identifier"}, query-all-selected-organisms {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 43, :column 7, :end-line 43, :end-column 35, :arglists (quote ([input-organism identifiers]))}, :name gointermod.utils.comms/query-all-selected-organisms, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 35, :method-params ([input-organism identifiers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-organism identifiers]))}, resolve-ids {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 55, :column 7, :end-line 55, :end-column 18, :arglists (quote ([source input])), :doc "Completes the steps required to resolve identifiers.\n  1. Start an ID Resolution job.\n  2. Poll the server for the job status (every 1s)\n  3. Delete the job (side effect).\n  4. Return results"}, :name gointermod.utils.comms/resolve-ids, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 18, :method-params ([source input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source input])), :doc "Completes the steps required to resolve identifiers.\n  1. Start an ID Resolution job.\n  2. Poll the server for the job status (every 1s)\n  3. Delete the job (side effect).\n  4. Return results"}, resolve-id {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 82, :column 9, :end-line 82, :end-column 19, :arglists (quote ([source input])), :doc "Resolves an ID or set of IDs from Intermine."}, :name gointermod.utils.comms/resolve-id, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 19, :method-params ([source input]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source input])), :doc "Resolves an ID or set of IDs from Intermine."}, enrichment {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/yy406/projects/go-intermod/src/cljs/gointermod/utils/comms.cljs", :line 94, :column 11, :end-line 94, :end-column 21, :arglists (quote ([{{:keys [root token]} :service} {:keys [ids widget maxp correction]}])), :doc "Get the results of using a list enrichment widget to calculate statistics for a set of objects."}, :name gointermod.utils.comms/enrichment, :variadic false, :file "src/cljs/gointermod/utils/comms.cljs", :end-column 21, :method-params ([p__30123 p__30124]), :protocol-impl nil, :arglists-meta (nil nil), :column 5, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{{:keys [root token]} :service} {:keys [ids widget maxp correction]}])), :doc "Get the results of using a list enrichment widget to calculate statistics for a set of objects."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:maxp :service :format :concat-results :json-params :identifiers :else :wildCards :uid :organisms :extra :recur :ids :type :correction :token :widget :with-credentials? :form-params :mine :output? :root :status :active-evidence-codes :caseSensitive :query :body :keywordize-keys? :results}, :order [:organisms :service :mine :active-evidence-codes :with-credentials? :keywordize-keys? :form-params :query :format :body :recur :else :output? :concat-results :json-params :uid :status :identifiers :type :caseSensitive :wildCards :extra :results :root :token :ids :widget :maxp :correction]}, :doc nil}